ROOT(columns=[('replaced_name', REPLACE(name, 'Alex':string, 'Alexander':string)), ('removed_name', REPLACE(name, 'Alex':string)), ('case_name', REPLACE(name, 'alex':string)), ('replace_empty_text', REPLACE('':string, 'a':string, 'b':string)), ('replace_with_empty_pattern', REPLACE('abc':string, '':string, 'x':string)), ('remove_substring', REPLACE('abc':string, 'a':string, '':string)), ('empty_all', REPLACE('':string, '':string, '':string)), ('substring_not_found', REPLACE('hello':string, 'x':string, 'y':string)), ('overlapping_matches', REPLACE('aaa':string, 'aa':string, 'b':string)), ('multiple_occurrences', REPLACE('a a a':string, 'a':string, 'b':string)), ('case_sensitive', REPLACE('Apple':string, 'apple':string, 'orange':string)), ('unicode_handling', REPLACE('café':string, 'é':string, 'e':string)), ('special_character_replace', REPLACE('a$b$c':string, '$':string, '':string)), ('longer_replacement', REPLACE('x':string, 'x':string, 'xyz':string)), ('shorter_replacement', REPLACE('xyzxyz':string, 'xyz':string, 'x':string)), ('same_value_args', REPLACE('foofoo':string, 'foo':string, 'foo':string)), ('nested_like_replace', REPLACE('abcabc':string, 'abc':string, 'abcabc':string))], orderings=[])
 FILTER(condition=name == 'Alex Rodriguez':string, columns={'name': name})
  SCAN(table=main.sbCustomer, columns={'name': sbCustName})
