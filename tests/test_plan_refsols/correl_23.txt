ROOT(columns=[('n_sizes', agg_1)], orderings=[])
 AGGREGATE(keys={}, aggregations={'agg_1': COUNT()})
  FILTER(condition=n_combos > avg_n_combo, columns={})
   PROJECT(columns={'avg_n_combo': avg_n_combo, 'n_combos': DEFAULT_TO(agg_0, 0:int64)})
    JOIN(conditions=[True:bool], types=['left'], columns={'agg_0': t1.agg_0, 'avg_n_combo': t0.avg_n_combo})
     PROJECT(columns={'avg_n_combo': agg_0})
      AGGREGATE(keys={}, aggregations={'agg_0': AVG(n_combos)})
       PROJECT(columns={'n_combos': DEFAULT_TO(agg_0, 0:int64)})
        AGGREGATE(keys={'size': size}, aggregations={'agg_0': COUNT()})
         AGGREGATE(keys={'container': container, 'part_type': part_type, 'size': size}, aggregations={})
          SCAN(table=tpch.PART, columns={'container': p_container, 'part_type': p_type, 'size': p_size})
     AGGREGATE(keys={'size': size}, aggregations={'agg_0': COUNT()})
      AGGREGATE(keys={'container': container, 'part_type': part_type, 'size': size}, aggregations={})
       SCAN(table=tpch.PART, columns={'container': p_container, 'part_type': p_type, 'size': p_size})
