ROOT(columns=[('n', n)], orderings=[])
 AGGREGATE(keys={}, aggregations={'n': NDISTINCT(s_suppkey)})
  FILTER(condition=p_retailprice < global_avg_price * 0.85:numeric & p_retailprice < ps_supplycost * 1.5:numeric & p_retailprice < sum_p_retailprice / sum_expr_1, columns={'s_suppkey': s_suppkey})
   JOIN(condition=t0.ps_partkey == t1.p_partkey, type=INNER, cardinality=SINGULAR_FILTER, columns={'global_avg_price': t0.global_avg_price, 'p_retailprice': t1.p_retailprice, 'ps_supplycost': t0.ps_supplycost, 's_suppkey': t0.s_suppkey, 'sum_expr_1': t0.sum_expr_1, 'sum_p_retailprice': t0.sum_p_retailprice})
    JOIN(condition=t0.s_suppkey == t1.ps_suppkey, type=INNER, cardinality=PLURAL_ACCESS, columns={'global_avg_price': t0.global_avg_price, 'ps_partkey': t1.ps_partkey, 'ps_supplycost': t1.ps_supplycost, 's_suppkey': t0.s_suppkey, 'sum_expr_1': t0.sum_expr_1, 'sum_p_retailprice': t0.sum_p_retailprice})
     JOIN(condition=t0.s_suppkey == t1.ps_suppkey, type=INNER, cardinality=SINGULAR_ACCESS, columns={'global_avg_price': t0.global_avg_price, 's_suppkey': t0.s_suppkey, 'sum_expr_1': t1.sum_expr_1, 'sum_p_retailprice': t1.sum_p_retailprice})
      JOIN(condition=True:bool, type=INNER, cardinality=PLURAL_FILTER, columns={'global_avg_price': t0.global_avg_price, 's_suppkey': t1.s_suppkey})
       AGGREGATE(keys={}, aggregations={'global_avg_price': AVG(p_retailprice)})
        SCAN(table=tpch.PART, columns={'p_retailprice': p_retailprice})
       FILTER(condition=s_acctbal < 1000:numeric & s_nationkey == 19:numeric, columns={'s_suppkey': s_suppkey})
        SCAN(table=tpch.SUPPLIER, columns={'s_acctbal': s_acctbal, 's_nationkey': s_nationkey, 's_suppkey': s_suppkey})
      AGGREGATE(keys={'ps_suppkey': ps_suppkey}, aggregations={'sum_expr_1': SUM(IFF(PRESENT(p_retailprice), 1:numeric, 0:numeric)), 'sum_p_retailprice': SUM(p_retailprice)})
       JOIN(condition=t0.ps_partkey == t1.p_partkey, type=INNER, cardinality=SINGULAR_ACCESS, columns={'p_retailprice': t1.p_retailprice, 'ps_suppkey': t0.ps_suppkey})
        SCAN(table=tpch.PARTSUPP, columns={'ps_partkey': ps_partkey, 'ps_suppkey': ps_suppkey})
        SCAN(table=tpch.PART, columns={'p_partkey': p_partkey, 'p_retailprice': p_retailprice})
     SCAN(table=tpch.PARTSUPP, columns={'ps_partkey': ps_partkey, 'ps_suppkey': ps_suppkey, 'ps_supplycost': ps_supplycost})
    FILTER(condition=p_container == 'LG DRUM':string, columns={'p_partkey': p_partkey, 'p_retailprice': p_retailprice})
     SCAN(table=tpch.PART, columns={'p_container': p_container, 'p_partkey': p_partkey, 'p_retailprice': p_retailprice})
