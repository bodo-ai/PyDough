WITH _T0 AS (
  SELECT
    COUNT(
      CASE WHEN SBTRANSACTION.sbtxtype = 'buy' THEN SBTRANSACTION.sbtxtype ELSE NULL END
    ) OVER (PARTITION BY DATE_TRUNC('DAY', CAST(SBTRANSACTION.sbtxdatetime AS TIMESTAMP)) ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS N_BUYS_WITHIN_DAY,
    ROUND(
      (
        100.0 * SUM(SBTICKER.sbtickersymbol IN ('AAPL', 'AMZN')) OVER (ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
      ) / COUNT(*) OVER (ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
      2
    ) AS PCT_APPLE_TXNS,
    ROUND(
      AVG(SBTRANSACTION.sbtxamount) OVER (ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
      2
    ) AS ROLLING_AVG_AMOUNT,
    SUM(
      IFF(
        SBTRANSACTION.sbtxtype = 'buy',
        SBTRANSACTION.sbtxshares,
        0 - SBTRANSACTION.sbtxshares
      )
    ) OVER (ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SHARE_CHANGE,
    COUNT(*) OVER (PARTITION BY DATE_TRUNC('DAY', CAST(SBTRANSACTION.sbtxdatetime AS TIMESTAMP)) ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TXN_WITHIN_DAY,
    SBTRANSACTION.sbtxdatetime AS SBTXDATETIME
  FROM MAIN.SBTRANSACTION AS SBTRANSACTION
  JOIN MAIN.SBTICKER AS SBTICKER
    ON SBTICKER.sbtickerid = SBTRANSACTION.sbtxtickerid
  WHERE
    MONTH(SBTRANSACTION.sbtxdatetime) = 4
    AND SBTRANSACTION.sbtxstatus = 'success'
    AND YEAR(SBTRANSACTION.sbtxdatetime) = 2023
)
SELECT
  SBTXDATETIME AS date_time,
  TXN_WITHIN_DAY AS txn_within_day,
  N_BUYS_WITHIN_DAY AS n_buys_within_day,
  PCT_APPLE_TXNS AS pct_apple_txns,
  SHARE_CHANGE AS share_change,
  ROLLING_AVG_AMOUNT AS rolling_avg_amount
FROM _T0
ORDER BY
  SBTXDATETIME NULLS FIRST
