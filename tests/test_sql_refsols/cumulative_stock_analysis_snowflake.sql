SELECT
  SBTRANSACTION.sbtxdatetime AS date_time,
  COUNT(*) OVER (PARTITION BY DATE_TRUNC('DAY', CAST(SBTRANSACTION.sbtxdatetime AS TIMESTAMP)) ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS txn_within_day,
  COUNT(
    CASE WHEN SBTRANSACTION.sbtxtype = 'buy' THEN SBTRANSACTION.sbtxtype ELSE NULL END
  ) OVER (PARTITION BY DATE_TRUNC('DAY', CAST(SBTRANSACTION.sbtxdatetime AS TIMESTAMP)) ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS n_buys_within_day,
  ROUND(
    (
      100.0 * COUNT_IF(SBTICKER.sbtickersymbol IN ('AAPL', 'AMZN')) OVER (ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    ) / COUNT(*) OVER (ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
    2
  ) AS pct_apple_txns,
  SUM(
    IFF(
      SBTRANSACTION.sbtxtype = 'buy',
      SBTRANSACTION.sbtxshares,
      0 - SBTRANSACTION.sbtxshares
    )
  ) OVER (ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS share_change,
  ROUND(
    AVG(SBTRANSACTION.sbtxamount) OVER (ORDER BY SBTRANSACTION.sbtxdatetime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
    2
  ) AS rolling_avg_amount
FROM MAIN.SBTRANSACTION AS SBTRANSACTION
JOIN MAIN.SBTICKER AS SBTICKER
  ON SBTICKER.sbtickerid = SBTRANSACTION.sbtxtickerid
WHERE
  MONTH(CAST(SBTRANSACTION.sbtxdatetime AS TIMESTAMP)) = 4
  AND SBTRANSACTION.sbtxstatus = 'success'
  AND YEAR(CAST(SBTRANSACTION.sbtxdatetime AS TIMESTAMP)) = 2023
ORDER BY
  SBTRANSACTION.sbtxdatetime NULLS FIRST
