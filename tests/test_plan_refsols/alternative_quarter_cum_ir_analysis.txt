ROOT(columns=[('quarter', quarter), ('n_incidents', DEFAULT_TO(ndistinct_in_device_id, 0:numeric)), ('n_sold', DEFAULT_TO(n_rows, 0:numeric)), ('quarter_cum', ROUND(RELSUM(args=[DEFAULT_TO(ndistinct_in_device_id, 0:numeric)], partition=[], order=[(quarter):asc_last], cumulative=True) / RELSUM(args=[DEFAULT_TO(n_rows, 0:numeric)], partition=[], order=[(quarter):asc_last], cumulative=True), 2:numeric))], orderings=[(quarter):asc_first])
 JOIN(condition=t0.quarter == t1.quarter, type=LEFT, cardinality=SINGULAR_FILTER, columns={'n_rows': t1.n_rows, 'ndistinct_in_device_id': t0.ndistinct_in_device_id, 'quarter': t0.quarter})
  JOIN(condition=t0.quarter == t1.quarter, type=LEFT, cardinality=SINGULAR_FILTER, columns={'ndistinct_in_device_id': t1.ndistinct_in_device_id, 'quarter': t0.quarter})
   AGGREGATE(keys={'quarter': DATETIME(ca_dt, 'start of quarter':string)}, aggregations={})
    JOIN(condition=t0.ca_dt < DATETIME(t1.pr_release, '+2 years':string, 'start of quarter':string) & t0.ca_dt >= t1.pr_release, type=INNER, cardinality=SINGULAR_FILTER, columns={'ca_dt': t0.ca_dt})
     SCAN(table=main.CALENDAR, columns={'ca_dt': ca_dt})
     FILTER(condition=pr_name == 'RubyCopper-Star':string, columns={'pr_release': pr_release})
      SCAN(table=main.PRODUCTS, columns={'pr_name': pr_name, 'pr_release': pr_release})
   AGGREGATE(keys={'quarter': DATETIME(ca_dt, 'start of quarter':string)}, aggregations={'ndistinct_in_device_id': NDISTINCT(in_device_id)})
    JOIN(condition=t0.in_device_id == t1.de_id & t1.de_product_id == t0.pr_id, type=INNER, cardinality=SINGULAR_FILTER, columns={'ca_dt': t0.ca_dt, 'in_device_id': t0.in_device_id})
     JOIN(condition=t0.in_repair_country_id == t1.co_id, type=INNER, cardinality=SINGULAR_FILTER, columns={'ca_dt': t0.ca_dt, 'in_device_id': t0.in_device_id, 'pr_id': t1.pr_id})
      JOIN(condition=t0.ca_dt == DATETIME(t1.in_error_report_ts, 'start of day':string), type=INNER, cardinality=PLURAL_FILTER, columns={'ca_dt': t0.ca_dt, 'in_device_id': t1.in_device_id, 'in_repair_country_id': t1.in_repair_country_id})
       JOIN(condition=t0.ca_dt < DATETIME(t1.pr_release, '+2 years':string, 'start of quarter':string) & t0.ca_dt >= t1.pr_release, type=INNER, cardinality=SINGULAR_FILTER, columns={'ca_dt': t0.ca_dt})
        SCAN(table=main.CALENDAR, columns={'ca_dt': ca_dt})
        FILTER(condition=pr_name == 'RubyCopper-Star':string, columns={'pr_release': pr_release})
         SCAN(table=main.PRODUCTS, columns={'pr_name': pr_name, 'pr_release': pr_release})
       SCAN(table=main.INCIDENTS, columns={'in_device_id': in_device_id, 'in_error_report_ts': in_error_report_ts, 'in_repair_country_id': in_repair_country_id})
      JOIN(condition=True:bool, type=INNER, cardinality=SINGULAR_FILTER, columns={'co_id': t1.co_id, 'pr_id': t0.pr_id})
       FILTER(condition=pr_name == 'RubyCopper-Star':string, columns={'pr_id': pr_id})
        SCAN(table=main.PRODUCTS, columns={'pr_id': pr_id, 'pr_name': pr_name})
       FILTER(condition=co_name == 'CN':string, columns={'co_id': co_id})
        SCAN(table=main.COUNTRIES, columns={'co_id': co_id, 'co_name': co_name})
     SCAN(table=main.DEVICES, columns={'de_id': de_id, 'de_product_id': de_product_id})
  AGGREGATE(keys={'quarter': DATETIME(ca_dt, 'start of quarter':string)}, aggregations={'n_rows': COUNT()})
   JOIN(condition=t0.de_product_id == t1.pr_id, type=INNER, cardinality=SINGULAR_FILTER, columns={'ca_dt': t0.ca_dt})
    JOIN(condition=t0.ca_dt == DATETIME(t1.de_purchase_ts, 'start of day':string), type=INNER, cardinality=PLURAL_FILTER, columns={'ca_dt': t0.ca_dt, 'de_product_id': t1.de_product_id})
     JOIN(condition=t0.ca_dt < DATETIME(t1.pr_release, '+2 years':string, 'start of quarter':string) & t0.ca_dt >= t1.pr_release, type=INNER, cardinality=SINGULAR_FILTER, columns={'ca_dt': t0.ca_dt})
      SCAN(table=main.CALENDAR, columns={'ca_dt': ca_dt})
      FILTER(condition=pr_name == 'RubyCopper-Star':string, columns={'pr_release': pr_release})
       SCAN(table=main.PRODUCTS, columns={'pr_name': pr_name, 'pr_release': pr_release})
     SCAN(table=main.DEVICES, columns={'de_product_id': de_product_id, 'de_purchase_ts': de_purchase_ts})
    FILTER(condition=pr_name == 'RubyCopper-Star':string, columns={'pr_id': pr_id})
     SCAN(table=main.PRODUCTS, columns={'pr_id': pr_id, 'pr_name': pr_name})
