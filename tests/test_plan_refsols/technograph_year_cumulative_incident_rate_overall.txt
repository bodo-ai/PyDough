ROOT(columns=[('yr', year), ('cum_ir', ROUND(RELSUM(args=[DEFAULT_TO(sum_n_rows, 0:numeric)], partition=[], order=[(year):asc_last], cumulative=True) / RELSUM(args=[DEFAULT_TO(sum_expr_3, 0:numeric)], partition=[], order=[(year):asc_last], cumulative=True), 2:numeric)), ('pct_bought_change', ROUND(100.0:numeric * DEFAULT_TO(sum_expr_3, 0:numeric) - PREV(args=[DEFAULT_TO(sum_expr_3, 0:numeric)], partition=[], order=[(year):asc_last]) / PREV(args=[DEFAULT_TO(sum_expr_3, 0:numeric)], partition=[], order=[(year):asc_last]), 2:numeric)), ('pct_incident_change', ROUND(100.0:numeric * DEFAULT_TO(sum_n_rows, 0:numeric) - PREV(args=[DEFAULT_TO(sum_n_rows, 0:numeric)], partition=[], order=[(year):asc_last]) / PREV(args=[DEFAULT_TO(sum_n_rows, 0:numeric)], partition=[], order=[(year):asc_last]), 2:numeric)), ('bought', DEFAULT_TO(sum_expr_3, 0:numeric)), ('incidents', DEFAULT_TO(sum_n_rows, 0:numeric))], orderings=[(year):asc_first])
 FILTER(condition=DEFAULT_TO(sum_expr_3, 0:numeric) > 0:numeric, columns={'sum_expr_3': sum_expr_3, 'sum_n_rows': sum_n_rows, 'year': year})
  AGGREGATE(keys={'year': YEAR(ca_dt)}, aggregations={'sum_expr_3': SUM(expr_3), 'sum_n_rows': SUM(n_rows)})
   JOIN(condition=t0.ca_dt == t1.ca_dt, type=LEFT, cardinality=SINGULAR_FILTER, reverse_cardinality=SINGULAR_ACCESS, columns={'ca_dt': t0.ca_dt, 'expr_3': t0.n_rows, 'n_rows': t1.n_rows})
    JOIN(condition=t0.ca_dt == t1.ca_dt, type=LEFT, cardinality=SINGULAR_FILTER, reverse_cardinality=SINGULAR_ACCESS, columns={'ca_dt': t0.ca_dt, 'n_rows': t1.n_rows})
     SCAN(table=main.CALENDAR, columns={'ca_dt': ca_dt})
     AGGREGATE(keys={'ca_dt': ca_dt}, aggregations={'n_rows': COUNT()})
      JOIN(condition=t0.ca_dt == DATETIME(t1.de_purchase_ts, 'start of day':string), type=INNER, cardinality=PLURAL_FILTER, reverse_cardinality=SINGULAR_ACCESS, columns={'ca_dt': t0.ca_dt})
       SCAN(table=main.CALENDAR, columns={'ca_dt': ca_dt})
       SCAN(table=main.DEVICES, columns={'de_purchase_ts': de_purchase_ts})
    AGGREGATE(keys={'ca_dt': ca_dt}, aggregations={'n_rows': COUNT()})
     JOIN(condition=t0.ca_dt == DATETIME(t1.in_error_report_ts, 'start of day':string), type=INNER, cardinality=PLURAL_FILTER, reverse_cardinality=SINGULAR_ACCESS, columns={'ca_dt': t0.ca_dt})
      SCAN(table=main.CALENDAR, columns={'ca_dt': ca_dt})
      SCAN(table=main.INCIDENTS, columns={'in_error_report_ts': in_error_report_ts})
